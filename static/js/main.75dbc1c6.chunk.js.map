{"version":3,"sources":["components/UserDetails.js","components/UserBio.js","components/Confirm.js","components/Success.js","App.js","serviceWorker.js","index.js"],"names":["UserDeails","nextPage","handleChange","state","Fragment","className","type","id","aria-describedby","placeholder","name","value","firstname","onChange","lastname","email","password","onClick","UserBio","prevPage","bio","occupation","city","country","Confirm","Success","goHome","App","useState","step","setState","e","preventDefault","input","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75dbc1c6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction UserDeails({ nextPage, handleChange, state }) {\r\n  return(\r\n    <React.Fragment> \r\n        <h1 className=\"text-center text-primary my-3\"> User Details </h1>\r\n        <div className=\"col-sm-10 offset-sm-1\">\r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    id=\"firstname\" \r\n                    aria-describedby=\"emailHelp\" \r\n                    placeholder=\"First Name\"\r\n                    name=\"firstname\"\r\n                    value={state.firstname}\r\n                    onChange={ handleChange('firstname') } \r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    id=\"lastname\" \r\n                    aria-describedby=\"emailHelp\" \r\n                    placeholder=\"Last Name\"\r\n                    name=\"lastname\"\r\n                    value={state.lastname}\r\n                    onChange={ handleChange('lastname') } \r\n                />\r\n            </div> \r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"email\" \r\n                    className=\"form-control\" \r\n                    id=\"email\" \r\n                    aria-describedby=\"emailHelp\" \r\n                    placeholder=\"Enter email\"\r\n                    name=\"email\"\r\n                    value={state.email}                    \r\n                    onChange={ handleChange('email') } \r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"password\" \r\n                    className=\"form-control\" \r\n                    id=\"password\" \r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={state.password}                    \r\n                    onChange={ handleChange('password') }\r\n                />\r\n            </div>\r\n            <button \r\n                className=\"btn btn-success\"\r\n                onClick={nextPage}\r\n            > Continue \r\n            </button>\r\n        </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default UserDeails;\r\n","import React from 'react';\r\n\r\nfunction UserBio({ prevPage, nextPage, handleChange, state }) {\r\n  return(\r\n    <React.Fragment> \r\n        <h1 className=\"text-center text-primary my-3\"> User Bio </h1>\r\n        <div className=\"col-sm-10 offset-sm-1\">\r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    id=\"bio\" \r\n                    aria-describedby=\"emailHelp\" \r\n                    placeholder=\"Bio\"\r\n                    name=\"bio\"\r\n                    value={state.bio}\r\n                    onChange={ handleChange('bio') } \r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    id=\"occupation\" \r\n                    aria-describedby=\"emailHelp\" \r\n                    placeholder=\"Occupation\"\r\n                    name=\"occupation\"\r\n                    value={state.occupation}\r\n                    onChange={ handleChange('occupation') } \r\n                />\r\n            </div> \r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    id=\"city\" \r\n                    aria-describedby=\"emailHelp\" \r\n                    placeholder=\"City\"\r\n                    name=\"city\"\r\n                    value={state.city}\r\n                    onChange={ handleChange('city') } \r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    id=\"country\" \r\n                    placeholder=\"Country\"\r\n                    name=\"country\"\r\n                    value={state.country}\r\n                    onChange={ handleChange('country') }\r\n                />\r\n            </div>\r\n            <button \r\n                className=\"btn btn-success\"\r\n                onClick={nextPage}\r\n            > Continue \r\n            </button>\r\n            <button \r\n                className=\"btn btn-outline-secondary mx-2\"\r\n                onClick={prevPage}\r\n            > Back\r\n            </button>\r\n        </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default UserBio;\r\n","import React from 'react';\r\n\r\nfunction Confirm({\r\n        prevPage, \r\n        nextPage, \r\n        state\r\n    }){ \r\n  return(\r\n    <React.Fragment> \r\n        <h1 className=\"text-center text-primary my-3\"> Please Confirm and Submit </h1>\r\n        <div className=\"col-sm-10 offset-sm-1\">\r\n            <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">First Name: { state.firstname } </li>\r\n                <li className=\"list-group-item\">Last Name: { state.lastname } </li>\r\n                <li className=\"list-group-item\">Email: { state.email } </li>\r\n                <li className=\"list-group-item\">Password: { state.password } </li>\r\n                <li className=\"list-group-item\">Bio: { state.bio } </li>\r\n                <li className=\"list-group-item\">Occupation : { state.occupation }</li>\r\n                <li className=\"list-group-item\">City: { state.city }</li>\r\n                <li className=\"list-group-item\">Conuntry: { state.country } </li>\r\n            </ul>\r\n            <button \r\n                className=\"btn btn-success my-3\"\r\n                onClick={nextPage}\r\n            > Confirm and Continue\r\n            </button>\r\n            <button \r\n                className=\"btn btn-outline-secondary mx-2\"\r\n                onClick={prevPage}\r\n            > Back\r\n            </button>\r\n        </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Confirm;\r\n","import React from 'react';\r\n\r\nfunction Success({ goHome }) {\r\n  return(\r\n    <React.Fragment> \r\n        <h1 className=\"text-center text-success my-3\"> You successfully Submitted the form. </h1>\r\n        <div className=\"col-sm-10 offset-sm-1 text-center\">\r\n            <button \r\n                className=\"btn btn-success\"\r\n                onClick={goHome}\r\n            > Go Back to main Page \r\n            </button>\r\n        </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Success;\r\n","import React, {useState} from 'react';\nimport UserDeails from './components/UserDetails';\nimport UserBio from './components/UserBio';\nimport Confirm from './components/Confirm';\nimport Success from './components/Success';\n\nfunction App() {\n  const [state, setState] = useState({\n    step: 1,\n    firstname: '',\n    lastname: '',\n    email: '',\n    password: '',\n    bio: '',\n    occupation: '',\n    city: '',\n    country: ''\n  });\n\n  const { step } = state;\n\n  const prevPage = e => {\n    e.preventDefault();\n    setState({...state, step: step - 1 });\n  }\n\n  const nextPage = e => {\n    e.preventDefault();\n    setState({...state, step: step + 1 });\n  }\n\n  const goHome = () => {\n    setState({step: 1 });\n  }\n\n  const handleChange = input => e => {\n    setState({...state, [input] : e.target.value });\n  } \n\n  switch(step){\n    case 1:\n      return (\n        <div className=\"container\">\n          <UserDeails \n            nextPage={nextPage}\n            handleChange={handleChange}\n            state={state}\n          />\n        </div>\n      );\n      case 2:\n        return (\n          <div className=\"container\">\n            <UserBio \n              nextPage={nextPage}\n              prevPage={prevPage}\n              handleChange={handleChange}\n              state={state}\n            />\n          </div>\n        );\n      case 3:\n        return (\n          <div className=\"container\">\n            <Confirm \n              nextPage={nextPage}\n              prevPage={prevPage}\n              state={state}\n            />\n          </div>\n        );\n      case 4:\n          return <Success goHome={goHome} />\n      default:\n          return (\n            <div className=\"container\">\n              <UserDeails \n                nextPage={nextPage}\n                handleChange={handleChange}\n                state={state}\n              />\n            </div>\n          );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}